одель предметной области – основной элемент создания любой прикладной программы. С eё помощью разработчик определяет программный код, способы хранения сущностей и, в некоторых случаях, структуру и поведение пользовательского интерфейса [1]. В качестве такой модели, может быть использован денотатный граф, отражающий иерархическую модель денотатов и их отношений, что соответствует модели фрагмента реальной ситуации. Методика построения такого графа была разработана А.И. Новиковым[2]. Модель предметной области, основанная на денотатном графе, представлена «денотатными цепочками» — парами «денотат-отношение-денотат». Для такой модели существует атрибут «направление связи», который характеризует «важность» связи относительно конкретного обрабатываемого текста Для того, что бы убедиться в существовании возможности построения модели предметной области на основе денотатного графа провели следующий эксперимент: построили пробный граф предметной области «Искусственный интеллект», с опорой на тезаурус предметной области и литературу по выбранной теме, фрагмент которого представлен на рисунке.
Построенная  модель включает в себя 40 денотатных пар. Безусловно, такого количества терминов недостаточно, что бы описать выбранную предметную область, но  подойдет для построения  её программной модели. Понимание предметной области включает в себя не только её разбор на основные термины и поиск их эквивалентов в тезаурусе, но и процесс осмысления и построения связей между этими понятиями, и применение этих связей для построения цепочек «денотат-отношение-денотат» 
Проблема адекватности преставления модели предметной области в виде денотатного графа заключается в том, основным процессом формирования графа является понимание или корректное выделение основного содержания. Процесс понимания по своей природе очень субъективен и напрямую зависит от того, кто      занимается перекодированием предметной области из линейной структуры в графовую. Именно поэтому сам процесс перекодировки необходимо представить как «задачу на осмысление», в которой будет «данная величина» - осмысляемая предметная область и «искомая величина» - её денотатная структура
Проблема адекватности может быть решена в том случае, если удастся доказать однозначность и связность предметной области, представленной в виде денотатного графа. Для того что бы проверить модель на соответствие этим критериям, на основе денотатного графа был составлен тест, состоящий из десяти вопросов. Ответить на тест, было предложено выбранной рабочей группе, причем ответы на вопросы текста нужно было дать, основываясь только на данных, представленных в графе, не опираясь на собственный опыт и знания. По результатам опроса составлена таблица, с помощью которой определили, какие из вопросов или сегментов графа имеют неточности или совсем не соответствуют понятиям предметной области. Если вопрос однозначен и понятен и ему соответствует конкретная денотатная пара в графе, имеющая правильную связь, значит сегмент предметной области составлен верно. Если вопросу подходит не один, а несколько вариантов ответа, значит можно говорить о том, что некорректно составлено задание. И наконец, если на вопрос дано 50% и менее правильных ответов, значит, ошибку следует искать в модели предметной области. По результатам тестирования мы получили следующие результаты: из 10 вопросов 100% правильных ответов было дано на 3 из них, 80% правильных ответов на 5 вопросов, и на 2 вопроса 50% и менее. Для наглядности представим полученные результаты в виде функции распределения случайной величины, которая отражает вероятность возникновения того или иного события и ограничивается конечным числом вхождений. В нашем случае случайной величиной является распределение вариантов ответов, событием – вариант ответа, а конечным числом вхождений – количество опрошенных людей Диаграмма результатов тестирования представлена на рисунке 2.
 Такие результаты могут означать, что качество построенной модели данных хоть и приемлемо для понимания предметной области, но нуждается в более детальной проработке в виде добавления новых имен денотатов и связей между уже существующими денотатами. Для проверки этой гипотезы необходимо «прогнать» составленный тест через программу, которая с помощью поиска в предметной области сможет решить его в соответствии с теми данными, которые представлены в графе. Работа такой программы основана на наборе некоторых функций.  
В первую очередь, используем библиотеку Pymystem3 для определения начальной формы слов в вопросе и ответах теста, Rutrmextract для определения и разбиения на ключевые слова и Tokenize для разбиения каждого вопроса на отдельные элементы. Алгоритм программы построен следующим образом: сначала вопрос разбивается на токены, на основе которых, формируются ключи. Затем полученные токены разбиваем на n-граммы – блоки, состоящие из трех букв. Затем начинаем по очереди сравнивать n-граммы вопроса с n-грамммами каждого ответа. В ходе сравнения выделяются все, повторяющиеся из найденных. Каждая n-грамма имеет свою вероятность, которая никогда не превосходит единицу. Если вероятность найденной части более 0,55, то найденную цепочку «денотат-отношение-денотат» выводим к соответствующему ответу, тем самым увеличивается вес этого ответа. После того, как перебор всех n-грамм завершится, выставляем единицы к тем ответам, которые программа посчитала верными, остальным ответам (неправильным) соответствует «0».  Алгоритм программы, реализованный в псевдокоде, представлен на рисунке 3.
